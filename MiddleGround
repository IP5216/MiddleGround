 <!----<head>
    <title>MiddleGround Main</title> 
    <link rel="stylesheet" href="middleground2.css">
</head>
<body onload="inatialize()">    
  <section>
    <div id="other">
        <div id="h">
        <h1>Search for MiddleGround</h1>
        <form>
            <select name="type" id="y">
                <option>Soccer</option>
                <option>Resturaunts</option>
                <option>basketball</option>
                <option>bowling</option>
                <option>tennis</option>
                <option>Movies</option>
                <option>ice cream</option>
            <input type="search" placeholder="Where go you want to go" required id="y">
            <input type="text" placeholder="Adress 1" required id="ad1">
            <input type="text" placeholder="Adress 2" required id="ad2">
            <button type="submit" onclick="findmg()" on> Find the MiddleGround</button>
        </form>
    </div>
    </div>   
</section>
<script type="text/javascript" src="mainsrc.js" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB-0AWLSr0Z_nMALDr_FOoZoobnLWaP_14&callback=initMap&v=weekly"
async src="https://polyfill.io/v3/polyfill.min.js?features=default">
    
</script>
</body>--->
<!DOCTYPE html>
<html>
  <head>
    <title>MiddleGround</title>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
    <link rel="stylesheet" type="text/css" href="middleground2.css" />
    <script src="mainsrc.js"></script>
  </head>
  <body>
    <div id="map"></div>
    <div id="resultlist">
        <form>
            <label for="list">Middle Ground Locations:</label>
            <select size="" id="list" name="list" single>
        </form>
    </div>
    <!-- Async script executes immediately and must be after any DOM elements used in callback. -->
    <script
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB-0AWLSr0Z_nMALDr_FOoZoobnLWaP_14&callback=initMap&v=weekly&libraries=places"
      async>
      let map;
let geocoder;
let mgMarker;
let markers = [];
let addresses = [];
let noOfAddresses = 0;
let service;
let infowindow;
let typeInput;
let placeMarkers = [];
let mgLocationsListBox;

function initMap() {
    map = new google.maps.Map(document.getElementById("map"), {
      zoom: 8,
      center: { lat: 38.9072, lng: -77.0369 },
      mapTypeControl: false,
    });
    geocoder = new google.maps.Geocoder();
    const findMG = document.createElement("input");
    findMG.type = "button";
    findMG.value = "Find MiddleGround";
    findMG.classList.add("button", "button-primary");
    map.controls[google.maps.ControlPosition.TOP_RIGHT].push(findMG);
    mgLocationsListBox = document.querySelector('#list');
    mgLocationsListBox.addEventListener("click", () =>
      highlightSelectedMarker()

    );
    map.controls[google.maps.ControlPosition.RIGHT_TOP].push(mgLocationsListBox);
    mgMarker = new google.maps.Marker({
        map,
      }); 
    mgMarker.setIcon("http://maps.google.com/mapfiles/ms/icons/blue-dot.png");
    findMG.addEventListener("click", () =>
    middleGround(mgMarker, map)
    );
    typeInput = document.createElement("input");
    typeInput.placeholder = "Type of Place";
    typeInput.type = "search";
    map.controls[google.maps.ControlPosition.LEFT_TOP].push(typeInput);
    const addInput = document.createElement("input");
    addInput.type = "button";
    addInput.value = "+";
    addInput.classList.add("button", "button-primary");
    map.controls[google.maps.ControlPosition.TOP_RIGHT].push(addInput);
    addInput.addEventListener("click", () =>
      initInput()
    );
    const delInput = document.createElement("input");
    delInput.type = "button";
    delInput.value = "-";
    delInput.classList.add("button", "button-primary");
    map.controls[google.maps.ControlPosition.TOP_RIGHT].push(delInput);
    delInput.addEventListener("click", () =>
      deleteInput()
    );
    initInput();
    initInput();
    service = new google.maps.places.PlacesService(map);
    infowindow = new google.maps.InfoWindow();

}
 


function initInput() {
    if (noOfAddresses > 11){
        alert("YOU HAVED REACHED THE LIMIT");
        return
    }
    const inputText = document.createElement("input");
    let markerNo = noOfAddresses;
    inputText.id = String(markerNo);
    
    
    map.controls[google.maps.ControlPosition.LEFT_TOP].push(inputText);
    
    markers.push(new google.maps.Marker({map,}));
    addresses.push([0.0, 0.0]);
    ++noOfAddresses;
    
    inputText.type = "search";
    inputText.placeholder = "Enter a location";
    
    
    inputText.addEventListener("focusout", () =>
      geocode({ address: inputText.value }, markerNo)
    );
  }

function clear(marker) {
  marker.setMap(null);
}

function clearPlaceMarkers() {
  map.zoom = 8;
  mgLocationsListBox.innerHTML = "";
  mgLocationsListBox.size = 0;
  for (i = 0; i < placeMarkers.length; i++) {
    placeMarkers[i].setMap(null);
  }
  placeMarkers = [];
}

function highlightSelectedMarker() {
  for (i = 0; i < mgLocationsListBox.options.length; i++) {
    if(mgLocationsListBox.options[i].selected) {
      google.maps.event.trigger(placeMarkers[i], "click");
      map.zoom = 15;
      map.panTo(placeMarkers[i].getPosition());
      break;
    }
  }
}

function geocode(request, markerNo) {
    marker = markers[markerNo];
    lngLat = addresses[markerNo];
    clear(marker);
  geocoder
    .geocode(request)
    .then((result) => {
      const { results } = result;

      map.setCenter(results[0].geometry.location);
      marker.setPosition(results[0].geometry.location);
      marker.setMap(map);
      lngLat[0] = results[0].geometry.location.lng();
      lngLat[1] = results[0].geometry.location.lat();
      return results;
    })
    .catch((e) => {
        if (request.address != "") {
            alert("Geocode was not successful for the following reason: " + e);
        }
    });
}
function middleGround(mgMarker, map){
  clearPlaceMarkers();
  let longitude = 0;
  let lattitude = 0;
  addresses.forEach(element => {
      longitude += element[0];
      lattitude += element[1];
  });
  longitude /= noOfAddresses;
  lattitude /= noOfAddresses;
  var latLng = new google.maps.LatLng(lattitude,longitude);
  map.setCenter(latLng);
  var request = {
      location: latLng,
      radius: 8000,
      keyword: typeInput.value
  };
  service.nearbySearch(request, processNearbyResults);
  mgMarker.setPosition(latLng);
 }

 function processNearbyResults(results, status) {
   if (status == google.maps.places.PlacesServiceStatus.OK) {
     noOfResultsToShow = Math.min(50, results.length)
     mgLocationsListBox.size = noOfResultsToShow;
     for(i = 0; i < noOfResultsToShow; i++) {
       createMarker(results[i]);
      }
    }
 }

 function createMarker(place) {
     if (!place.geometry || !place.geometry.location) return;
     const marker = new google.maps.Marker({
         map,
         position: place.geometry.location
     });
     marker.setIcon("http://maps.google.com/mapfiles/ms/icons/green-dot.png");
     placeMarkers.push(marker);
     const option = new Option(place.name, place.name);
     mgLocationsListBox.appendChild(option, undefined);
     google.maps.event.addListener(marker, "click", () => {
       contentString = place.name + "; " + place.vicinity + "; Rating: " + place.rating + "; Price Level: " + place.price_level;
       infowindow.setContent(contentString);
       infowindow.open({
        anchor: marker, 
        map,
        shouldFocus: false
        });
     });
 } 
  
  function deleteInput(){
    if(noOfAddresses > 2){
        clear(markers.pop());
        addresses.pop();
        --noOfAddresses;
        var elem = document.getElementById(String(noOfAddresses));
        elem.parentNode.removeChild(elem);
    }
    else{
        alert("INSUFFICIENT NUMBER OF ADDRESSES");
    }
   
  }
    </script>
    <style>
        /*body{
margin: 0;
padding: 0;
font-family: Arial, Helvetica, sans-serif;
}
section{
    width: 100%;
    height: 100vh;
    background-image: linear-gradient(rgb(0,191,255), rgb(255,255,255));
    background-size: cover;
    background-position: center;
}
#other{
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 340px;
    text-align: center;
}
#h{
    position: relative;
    box-sizing: border-box;
    padding: 60px 30px;
    transition: .5s;
}
#h:hover{
    background:rgb(0,191,255);
    box-shadow: 0 0 20px rgba(0, 0, 0, .2);
}
h1{
    margin: 0 0 20px;
    color:black;
    font-size: 30px;
    text-transform:uppercase;
}
#h input{
    display: block;
    width: 100%;
    padding: 10px 20px;
    box-sizing: border-box;
    margin-bottom: 20px;
    border-radius: 20px;
    outline:none;
    font-size: 14px;
    border: none;
}
#h input [type="submit"]{
    cursor:pointer;
}
button{
    border-radius: 20px;
    width: 100%;
    height: 100%;
}
select{
    border-radius: 20px;
    width: 100%;
    height: 25px;
}*/
/* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
       #map {
        height: 100%;
      }
      
      /* Optional: Makes the sample page fill the window. */
      html,
      body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
      
      input[type="search"] {
        background-color: #fff;
        border: 0;
        border-radius: 2px;
        box-shadow: 0 1px 4px -1px rgba(0, 0, 0, 0.3);
        margin: 10px;
        padding: 0 0.5em;
        font: 400 18px Roboto, Arial, sans-serif;
        overflow: hidden;
        line-height: 40px;
        margin-right: 0;
        min-width: 25%;
      }
      
      input[type="button"] {
        background-color: #fff;
        border: 0;
        border-radius: 2px;
        box-shadow: 0 1px 4px -1px rgba(0, 0, 0, 0.3);
        margin: 10px;
        padding: 0 0.5em;
        font: 400 18px Roboto, Arial, sans-serif;
        overflow: hidden;
        height: 40px;
        cursor: pointer;
        margin-left: 5px;
      }
      input[type="button"]:hover {
        background: #ebebeb;
      }
      input[type="button"].button-primary {
        background-color: #1a73e8;
        color: white;
      }
      input[type="button"].button-primary:hover {
        background-color: #1765cc;
      }
      input[type="button"].button-secondary {
        background-color: white;
        color: #1a73e8;
      }
      input[type="button"].button-secondary:hover {
        background-color: #d2e3fc;
      }
      
      #response-container {
        background-color: #fff;
        border: 0;
        border-radius: 2px;
        box-shadow: 0 1px 4px -1px rgba(0, 0, 0, 0.3);
        margin: 10px;
        padding: 0 0.5em;
        font: 400 18px Roboto, Arial, sans-serif;
        overflow: hidden;
        overflow: auto;
        max-height: 50%;
        max-width: 90%;
        background-color: rgba(255, 255, 255, 0.95);
        font-size: small;
      }
      
      #instructions {
        background-color: #fff;
        border: 0;
        border-radius: 2px;
        box-shadow: 0 1px 4px -1px rgba(0, 0, 0, 0.3);
        margin: 10px;
        padding: 0 0.5em;
        font: 400 18px Roboto, Arial, sans-serif;
        overflow: hidden;
        padding: 1rem;
        font-size: medium;
      }
      select{
        background-color: #fff;
        border: 0;
        border-radius: 2px;
        box-shadow: 0 1px 4px -1px rgba(0, 0, 0, 0.3);
        margin: 10px;
        padding: 0 0.5em;
        font: 400 18px Roboto, Arial, sans-serif;
        overflow: hidden;
        line-height: 40px;
        margin-right: 0;
        min-width: 25%;
        font-size: larger;
      }

    </style>
  </body>
</html>
